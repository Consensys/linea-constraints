;; Compute log256 of word
fn log256(arg u256) -> (res u5) {
  var hi, lo u128
  var tmp u4
  ;; split argument
  hi,lo = arg
  ;; check hi or lo
  if hi == 0 goto low
  ;; hi mode
  tmp = log256_u128(hi)
  res = tmp + 16
  return
low:
  tmp = log256_u128(lo)
  res = tmp
  return
}

fn log256_u128(arg u128) -> (res u4) {
  var hi, lo u64
  var tmp u3
  ;; split argument
  hi,lo = arg
  ;; check hi or lo
  if hi == 0 goto low
  ;; hi mode
  tmp = log256_u64(hi)
  res = tmp + 8
  return
low:
  tmp = log256_u64(lo)
  res = tmp
  return
}

fn log256_u64(arg u64) -> (res u3) {
  var hi, lo u32
  var tmp u2
  ;; split argument
  hi,lo = arg
  ;; check hi or lo
  if hi == 0 goto low
  ;; hi mode
  tmp = log256_u32(hi)
  res = tmp + 4
  return
low:
  tmp = log256_u32(lo)
  res = tmp
  return
}

fn log256_u32(arg u32) -> (res u2) {
  var hi, lo u16
  var tmp u1
  ;; split argument
  hi,lo = arg
  ;; check hi or lo
  if hi == 0 goto low
  ;; hi mode
  tmp = log256_u16(hi)
  res = tmp + 2
  return
low:
  tmp = log256_u16(lo)
  res = tmp
  return
}

fn log256_u16(arg u16) -> (res u1) {
  var hi, lo u8
  ;; split argument
  hi,lo = arg
  ;; check hi or lo
  if hi == 0 goto low
  ;; hi
  res = 1
  return
low:
  res = 0
  return
}
